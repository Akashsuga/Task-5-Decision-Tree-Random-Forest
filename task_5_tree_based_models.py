# -*- coding: utf-8 -*-
"""Task-5-Tree based models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19jW7Wn28c-mugaayGpLYi8Z-H2DsHk_w
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
df = pd.read_csv('heart.csv')

# ------------------- Exploratory Data Analysis -------------------
print("Dataset Preview:")
print(df.head())
print("\nDataset Info:")
print(df.info())
print("\nDataset Description:")
print(df.describe())

# Correlation Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.tight_layout()
plt.show()  # No auto save

# Target Class Distribution
df['target'].value_counts().plot(kind='bar', title='Target Class Distribution')
plt.xlabel("Target Class (0 = No Disease, 1 = Disease)")
plt.ylabel("Count")
plt.tight_layout()
plt.show()  # No auto save

# ------------------- Feature & Target Split -------------------
X = df.drop('target', axis=1)
y = df['target']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ------------------- Decision Tree -------------------
dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)

# Visualize Decision Tree
plt.figure(figsize=(20, 10))
plot_tree(dt, feature_names=X.columns, class_names=['No Disease', 'Disease'], filled=True)
plt.title("Decision Tree")
plt.show()  # No auto save

# Evaluate Decision Tree
y_pred_dt = dt.predict(X_test)
print("\nDecision Tree Accuracy:", accuracy_score(y_test, y_pred_dt))
print("\nClassification Report (Decision Tree):\n", classification_report(y_test, y_pred_dt))

# Cross-validation for Decision Tree
dt_cv_score = cross_val_score(dt, X, y, cv=5)
print("Decision Tree CV Accuracy:", dt_cv_score.mean())

# ------------------- Pruned Decision Tree -------------------
dt_pruned = DecisionTreeClassifier(max_depth=4, random_state=42)
dt_pruned.fit(X_train, y_train)
y_pred_pruned = dt_pruned.predict(X_test)
print("\nPruned Decision Tree Accuracy:", accuracy_score(y_test, y_pred_pruned))

# ------------------- Random Forest -------------------
rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

print("\nRandom Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print("\nClassification Report (Random Forest):\n", classification_report(y_test, y_pred_rf))

# Cross-validation for Random Forest
rf_cv_score = cross_val_score(rf, X, y, cv=5)
print("Random Forest CV Accuracy:", rf_cv_score.mean())

# ------------------- Feature Importance -------------------
importances = pd.Series(rf.feature_importances_, index=X.columns)
importances.sort_values().plot(kind='barh', title='Feature Importances (Random Forest)')
plt.tight_layout()
plt.show()  # No auto save

# ------------------- Optional: Pairplot of Top 3 Features -------------------
top_features = importances.sort_values(ascending=False).head(3).index.tolist()
sns.pairplot(df, vars=top_features, hue="target")
plt.suptitle("Pairplot of Top 3 Important Features", y=1.02)
plt.show()  # No auto save